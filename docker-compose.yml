services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: freqtrade_monitor_backend
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    env_file:
      - ./backend/.env
    networks:
      - freqtrade_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        # 正确的后端地址，使用服务名
        NEXT_PUBLIC_API_URL: http://backend:8000
    container_name: freqtrade_monitor_frontend
    command: npm run dev
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      - backend
    env_file:
      - ./frontend/.env
    networks:
      - freqtrade_network

  db:
    image: postgres:15-alpine
    container_name: freqtrade_monitor_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-freqtrade_monitor}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-freqtrade_monitor}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - freqtrade_network

  redis:
    image: redis:7-alpine
    container_name: freqtrade_monitor_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - freqtrade_network

  nginx:
    image: nginx:latest
    container_name: freqtrade_monitor_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - certbot_certs:/etc/letsencrypt
    depends_on:
      - backend
      - frontend
    networks:
      - freqtrade_network

  prometheus:
    image: prom/prometheus:latest
    container_name: freqtrade_monitor_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command: 
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - freqtrade_network

  grafana:
    image: grafana/grafana:latest
    container_name: freqtrade_monitor_grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./observability/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - freqtrade_network

  loki:
    image: grafana/loki:latest
    container_name: freqtrade_monitor_loki
    ports:
      - "3100:3100"
    volumes:
      - ./observability/loki/loki-config.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - freqtrade_network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  loki_data:
  certbot_certs:

networks:
  freqtrade_network:
    driver: bridge